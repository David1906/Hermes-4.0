// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SqliteContext))]
    partial class SqliteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Infrastructure.Data.Boards.BoardDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OperationDbModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperationDbModelId");

                    b.ToTable("Boards", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Defects.DefectDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BoardDbModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("TEXT");

                    b.Property<int>("ErrorFlag")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRealDefect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(124)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoardDbModelId");

                    b.ToTable("Defects", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Logfiles.LogfileDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileInfo")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logfiles", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Operations.OperationDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAutoSend")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManuallyRemove")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LogfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Result")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SkipForSampling")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UploadLogfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UploadResult")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LogfileId");

                    b.HasIndex("UploadLogfileId");

                    b.ToTable("Operations", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Data.Boards.BoardDbModel", b =>
                {
                    b.HasOne("Infrastructure.Data.Operations.OperationDbModel", null)
                        .WithMany("Boards")
                        .HasForeignKey("OperationDbModelId");
                });

            modelBuilder.Entity("Infrastructure.Data.Defects.DefectDbModel", b =>
                {
                    b.HasOne("Infrastructure.Data.Boards.BoardDbModel", null)
                        .WithMany("Defects")
                        .HasForeignKey("BoardDbModelId");
                });

            modelBuilder.Entity("Infrastructure.Data.Operations.OperationDbModel", b =>
                {
                    b.HasOne("Infrastructure.Data.Logfiles.LogfileDbModel", "Logfile")
                        .WithMany()
                        .HasForeignKey("LogfileId");

                    b.HasOne("Infrastructure.Data.Logfiles.LogfileDbModel", "UploadLogfile")
                        .WithMany()
                        .HasForeignKey("UploadLogfileId");

                    b.Navigation("Logfile");

                    b.Navigation("UploadLogfile");
                });

            modelBuilder.Entity("Infrastructure.Data.Boards.BoardDbModel", b =>
                {
                    b.Navigation("Defects");
                });

            modelBuilder.Entity("Infrastructure.Data.Operations.OperationDbModel", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
